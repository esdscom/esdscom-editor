@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids

@inject NavigationManager nav
@inject HttpClient api

<div class="row">
    <div class="col-2">
         <DataRequiredComponent Entity="@Entity"/>
        <button type="button" class="btn btn-link" @onclick="ToggleHelp">@Utils.SplitCamelCase(displayname)</button>
    </div>
    <div class="col-10">
        <button type="button" class="btn btn-primary" @onclick="SetEditMode">Select Phrases</button>
    </div>
</div>

<div hidden="@bHideHelp">
    <div class="row">
        <div class="col">
            <DataPointCommentsComponent HelpItems="@HelpItems" />
        </div>
    </div>
</div>

<div class="row m-2">
    <div class="col">
        @selected
    </div>
</div>

<div class="row" hidden="@(!bEditMode)">
    <div class="col-2">
        <button type="button" class="btn btn-primary" @onclick="SavePhrases">Save</button>
    </div>
    <div class="col-10">
        <span>@phraseSelectionMessage</span>
    </div>
</div>

<div style="height:480px;" hidden="@(!bEditMode)">

    <SfGrid DataSource="@phraseList" AllowPaging="true" Height="100%" Width="100%" AllowSorting="true" 
            AllowFiltering="true" AllowTextWrap="true" AllowSelection="true" RowHeight="30" Toolbar="@(new List<string>() { "Search" })">
        <GridPageSettings PageSize="10" />
        <GridEvents RowSelected="RowSelection" TValue="Phrase" RowDeselected="RowDeselection" />
        <GridSelectionSettings Type="@GetSelectionType()" PersistSelection="true"></GridSelectionSettings>
        <GridColumns>
            @if (showCheckboxes)
            {
                <GridColumn Type="ColumnType.CheckBox" AllowFiltering="false" AllowSorting="false" Width="60"></GridColumn>
            }
            <GridColumn Field=@nameof(Phrase.StrucCode) HeaderText="Structure Code" Width="100"></GridColumn>
            <GridColumn Field=@nameof(Phrase.Region) HeaderText="Region" Width="100"></GridColumn>
            <GridColumn Field=@nameof(Phrase.English) HeaderText="English" TextAlign="TextAlign.Left" Width="450"></GridColumn>
        </GridColumns>
    </SfGrid>

</div>

@code
{
    [CascadingParameter] public AppState AppState { get; set; }

    [Parameter] public XmlNode Node { get; set; }

    [Parameter] public BaseEntity Entity { get; set; }

    // [Parameter] public EventCallback<List<Phrase>> OnPhrasesSaved { get; set; }

    //  [Parameter] public EventCallback OnCancel { get; set; }

    public Dictionary<string, object> HelpItems { get; set; } = new();

    List<Phrase> phraseList;
    List<Phrase> selectedPhraseList = new();

    // int phraseCount { get; set; } = 10;
    bool showCheckboxes = true;
    string displayname;
    bool bHideHelp;
    bool bEditMode;
    string xPath;
    string sectionName;
    string sectionPrefix;
    string phraseSelectionMessage;

    string selected { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        displayname = Entity.DisplayName;

        xPath = XmlUtils.GetFullXPath(Node);

        if (Entity is not null)
        {
            displayname = Entity.DisplayName;

            HelpItems.Add("Comments", $"{Entity.Comments} {Entity.TypeComments}");
            HelpItems.Add("Occurs", Utils.GetOccursText(Entity.Occurs));
            HelpItems.Add("eSDSxml element path", xPath);
        }
        else
        {
            displayname = "entity Not found!!!";
        }

        sectionName = AppState.ActiveSectionName;
        sectionPrefix = $"01.{Utils.GetSectionNumber(sectionName)}";

        SetPhraseList(xPath);

        selected = Node.InnerText;

        bHideHelp = true;


    }

    SelectionType GetSelectionType()
    {
        if (Entity.Occurs == Enums.DataPointOccurence.OptionalZeroOrOne || Entity.Occurs == Enums.DataPointOccurence.RequiredExactlyOnce)
        {
            showCheckboxes = false;
            return SelectionType.Single;
        }
        else
        {
            showCheckboxes = true;
            return SelectionType.Multiple;
        }
    }

    public void RowSelection(RowSelectEventArgs<Phrase> args)
    {
        selectedPhraseList.Add(args.Data);
        DisplaySelectedPhrases();
        StateHasChanged();
    }

    public void RowDeselection(RowDeselectEventArgs<Phrase> args)
    {
        selectedPhraseList.Remove(args.Data);
        DisplaySelectedPhrases();
        StateHasChanged();
    }


    void SetEditMode()
    {
        bEditMode = !bEditMode;
    }

    string DisplaySelectedPhrases()
    {
        selected = string.Empty;

        foreach (Phrase phrase in selectedPhraseList)
        {
            selected += phrase.English + ", ";
        }

        return selected;
    }

    void SetPhraseList(string xPath)
    {
        if (!string.IsNullOrEmpty(xPath))
        {
            phraseList = AppState.Phrases.Where(p => p.XPath == xPath).ToList();

            phraseSelectionMessage = $"Showing phrases for eSDSxml element: {xPath}";
            if (phraseList.Count == 0)
            {
                phraseList = AppState.Phrases.Where(p => p.StrucCode.StartsWith(sectionPrefix)).ToList();
                phraseSelectionMessage = $"Showing phrases for section prefix: {@sectionPrefix}";
            }
        }
        else
        {
            phraseList = AppState.Phrases;
            phraseSelectionMessage = "Showing all phrases";
            Console.WriteLine($"No XPATH!: {Entity.DisplayName}");
        }
    }

    void SavePhrases()
    {
        string phraseText = "";
        selectedPhraseList.ForEach((p) => { phraseText += $", {p.English}"; });
        phraseText = phraseText.TrimStart(",".ToCharArray()).Trim(); 
        Node.InnerText = phraseText;        
        SetEditMode();
    }

    //async Task Close()
    //{
    //    await OnCancel.InvokeAsync();
    //}

    void ToggleHelp()
    {
        bHideHelp = !bHideHelp;
    }
}
