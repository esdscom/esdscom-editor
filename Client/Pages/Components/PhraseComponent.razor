@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids

@inject NavigationManager nav
@inject HttpClient api

<div class="row">
    <div class="col-6">
        <button type="button" class="btn btn-secondary" @onclick="SavePhrases">Save</button>
    </div>
</div>
<div class="row">
    <div class="col-6">
        <label>Display:</label>
        <select @onchange="@SetPhraseCount">
            <option value=10 selected>10</option>
            <option value=20>20</option>
            <option value=50>50</option>
            <option value=100>100</option>
        </select>
    </div>
    <div class="col-6">
        @occursText
    </div>
</div>

<div class="row">
    <div class="col">
        @selected
    </div>
</div>

<div class="row">

    <SfGrid @ref="@Grid" DataSource="@phraseList" EnableVirtualization="true" AllowPaging="true" AllowSorting="true"
            AllowFiltering="true" AllowTextWrap="true" AllowSelection="true" RowHeight="30">
        <GridPageSettings PageSize="10" />
        <GridEvents RowSelected="RowSelection" TValue="Phrase" RowDeselected="RowDeselection" />
        <GridSelectionSettings Type="@GetSelectionType()" PersistSelection="true"></GridSelectionSettings>
        <GridColumns>
            @if (showCheckboxes)
            {
                <GridColumn Type="ColumnType.CheckBox" AllowFiltering="false" AllowSorting="false" Width="60"></GridColumn>
            }
            <GridColumn Field=@nameof(Phrase.StrucCode) HeaderText="Structure Code" Width="100"></GridColumn>
            <GridColumn Field=@nameof(Phrase.Region) HeaderText="Region" Width="100"></GridColumn>
            <GridColumn Field=@nameof(Phrase.English) HeaderText="English" TextAlign="TextAlign.Left" Width="450"></GridColumn>
        </GridColumns>
    </SfGrid>

</div>

@code
{
    [CascadingParameter] public AppState AppState { get; set; }

    [Parameter] public XmlNode Node { get; set; }

    [Parameter] public BaseEntity Entity { get; set; }

    [Parameter] public EventCallback<List<Phrase>> OnPhrasesSaved { get; set; }

    [Parameter] public EventCallback OnCancel { get; set; }

    SfGrid<Phrase> Grid;

    List<Phrase> phraseList;
    List<Phrase> selectedPhraseList = new();

    bool CorePhrases = true;
    bool ESPhrases = true;
    int phraseCount { get; set; } = 10;
    MarkupString occursText;
    bool showCheckboxes = true;

    string selected { get; set; }

    protected override void OnInitialized()
    {
        Entity.Occurs = Enums.DataPointOccurence.OptionalZeroOrMore;

        occursText = (MarkupString)Utils.GetOccursText(Entity.Occurs, true);

        SetPhraseList();
    }

    private SelectionType GetSelectionType()
    {
        if (Entity.Occurs == Enums.DataPointOccurence.OptionalZeroOrOne || Entity.Occurs == Enums.DataPointOccurence.RequiredExactlyOnce)
        {
            showCheckboxes = false;
            return SelectionType.Single;
        }
        else
        {
            showCheckboxes = true;
            return SelectionType.Multiple;
        }
    }

    public void RowSelection(RowSelectEventArgs<Phrase> args)
    {
        selectedPhraseList.Add(args.Data);
        DisplaySelectedPhrases();
        StateHasChanged();
    }

    public void RowDeselection(RowDeselectEventArgs<Phrase> args)
    {
        selectedPhraseList.Remove(args.Data);
        DisplaySelectedPhrases();
        StateHasChanged();
    }

    private string DisplaySelectedPhrases()
    {
        selected = string.Empty;

        foreach (Phrase phrase in selectedPhraseList)
        {
            selected += phrase.English + ", ";
        }

        return selected;
    }

    private void SetPhraseList()
    {
        phraseList = AppState.Phrases;
    }

    private void SetCore()
    {
        CorePhrases = !CorePhrases;
        SetPhraseList();
    }

    private void SetES()
    {
        ESPhrases = !ESPhrases;
        SetPhraseList();
    }

    private void SetPhraseCount(ChangeEventArgs e)
    {
        phraseCount = int.Parse(e.Value.ToString());
        SetPhraseList();
    }

    private async Task SavePhrases()
    {
        await OnPhrasesSaved.InvokeAsync(selectedPhraseList);
    }

    private async Task Close()
    {
        await OnCancel.InvokeAsync();
    }
}
