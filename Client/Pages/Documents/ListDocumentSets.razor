@page "/Documents/ListDocumentSets"

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons

@inject NavigationManager nav
@inject HttpClient api

<div class="container-fluid">

    <PageHeader Title="Document sets for my organization" />

    <div class="row">
        <div class="col">
            <SfButton CssClass="btn btn-primary" OnClick="@AddDocSet">Add new Document set</SfButton>
        </div>
    </div>

    <div class="row">
        <SfGrid DataSource="@docSetList" AllowPaging="true">
            <GridPageSettings PageSize="10"></GridPageSettings>
            <GridColumns>
                <GridColumn Field=@nameof(DatasheetFeed.Id) HeaderText="ID" Visible="false"></GridColumn>
                <GridColumn Field=@nameof(DatasheetFeed.Name) HeaderText="Name" Width="250"></GridColumn>
                <GridColumn HeaderText="Status" Width="50" TextAlign="TextAlign.Center">
                    <Template Context="docContext">
                        @{
                            DatasheetFeed docSet = (docContext as DatasheetFeed);
                            <p> @Utils.GetStatusText(docSet.Status) </p>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field=@nameof(DatasheetFeed.DatasheetCount) HeaderText="Links" Width="50" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field=@nameof(DatasheetFeed.CreatedDate) HeaderText="Created Date" Width="75" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field=@nameof(DatasheetFeed.UpdatedDate) HeaderText="Updated Date" Width="75" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field=@nameof(DatasheetFeed.UserName) HeaderText="Updated By" Width="100" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn HeaderText="Actions" TextAlign="TextAlign.Center" Width="200">
                    <Template Context="docSetContext">
                        @{
                            DatasheetFeed docSet = (docSetContext as DatasheetFeed);
                            <SfButton CssClass="e-link" OnClick="@(async () => await ViewDocSet(docSet.Id))">Edit</SfButton>
                            <SfButton CssClass="e-link" OnClick="@(async () => await ViewLinks(docSet.Id))">Linked Datasheets</SfButton>
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>

@if(ShowSpinner)
{
    <Spinner/>
}

@code
{
    [CascadingParameter] public AppState AppState { get; set; }

    List<DatasheetFeed> docSetList = new();
    AppDataService dMgr;
    bool ShowSpinner;


    protected override async Task OnInitializedAsync()
    {
        ShowSpinner = true;

        dMgr = new(api);

        docSetList = await dMgr.GetDatasheetFeedListForOrganizationAsync(AppState.User.OrganizationId);

        ShowSpinner = false;
        
        AppState.StatusBarMessage = $"total Document sets available: {docSetList.Count}";
    }

    private void AddDocSet()
    {
        nav.NavigateTo($"/Documents/EditDocumentSet/true");
    }

    private async Task ViewDocSet(Guid dsSetId)
    {
        AppState.ActiveDatasheetFeed = await dMgr.GetDatasheetFeedAsync(AppState.User.OrganizationId, dsSetId);
        nav.NavigateTo($"/Documents/EditDocumentSet/false");
    }

    private async Task ViewLinks(Guid dsSetId)
    {
        AppState.ActiveDatasheetFeed = await dMgr.GetDatasheetFeedAsync(AppState.User.OrganizationId, dsSetId);
        nav.NavigateTo($"/Documents/ListDocumentsInSet");
    }

    private void CopyDocSet(Guid dsSetId)
    {        
        nav.NavigateTo($"/Documents/DocumentSetCopy");
    }
}