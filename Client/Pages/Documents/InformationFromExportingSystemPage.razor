@page "/Documents/InformationFromExportingSystemPage"

@inject NavigationManager nav
@inject HttpClient api

<EditForm EditContext="CurrentEditContext" OnValidSubmit="SaveAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container-fluid">

        <PageHeader Title="@title" BackToURL="@backToUrl" />

        @foreach (XmlNode node in nodes)
        {
            BaseEntity entity = AppState.SchemaElements.Where(s => s.NodeName == node.Name).FirstOrDefault();

            <ComplexTypeComponent Node="@node" Entity="@entity" />
        }

        <div class="row">
            <div class="col">
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
        </div>

    </div>

</EditForm>

@code
{
    [CascadingParameter] public AppState AppState { get; set; }

    public EditContext CurrentEditContext { get; set; }

    XmlDocument orgInfoExpSys;
    XmlNodeList nodes;
    string title;
    Organization org;
    string backToUrl;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        org = AppState.Organization;

        title = $"Information From Exporting System for {org.Name}";
        AppState.StatusBarMessage = "ready";

        orgInfoExpSys = org.InfoExSysXDoc;

        if (orgInfoExpSys is null)
        {
            orgInfoExpSys = Utils.GetInfoExpSysXml();
        }

        if (orgInfoExpSys.HasChildNodes)
        {
            nodes = orgInfoExpSys.DocumentElement.ChildNodes;
        }

        CurrentEditContext = new EditContext(orgInfoExpSys);

        backToUrl = "/Documents/EditDocumentSet/false";
    }

    private async Task SaveAsync()
    {
        AppDataService dMgr = new(api);
        AppState.Organization = await dMgr.UpdateOrganizationAsync(org);
        nav.NavigateTo(backToUrl);
    }
}

