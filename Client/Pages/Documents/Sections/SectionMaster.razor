@page "/Documents/Sections/SectionMaster/{*NodeName}"

@inject NavigationManager nav
@inject HttpClient api

<EditForm EditContext="CurrentEditContext" OnValidSubmit="SaveAsync">

    <div class="container-fluid">
         <div class="row border border-primary mb-3">
            <div class="col align-self-start">
                <span>@itemName</span>
            </div>
             <div class="col align-self-end">
                <span>@sectionName</span>
            </div>
        </div>
        <div class="row d-flex mb-3">
            <div class="col align-self-start">
                <button type="submit" class="btn btn-success">Save All Changes</button>
            </div>
             <div class="col align-self-end">
                <button type="button" class="btn btn-secondary" @onclick="GoSectionHome">Back</button>
            </div>
        </div>

         <ComplexTypeComponent Node="@activeNode" Entity="@entity" />  

    </div>

</EditForm>

@code
{
    [CascadingParameter] public AppState AppState { get; set; }

    [Parameter] public string NodeName { get; set; }
    [Parameter] public string EntityType { get; set; }

    public EditContext CurrentEditContext { get; set; }

    XmlNode activeNode;
    BaseEntity entity;
    bool IsInfoExpSys;
    string itemName;
    string sectionName;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        try
        {
            base.OnParametersSet();

            if (NodeName.Contains(@"/"))  //this hack is needed because blazor router(?) strips // from front of xpath for some reason
            {
                NodeName = NodeName.Replace(@"DatasheetFeed", @"/");
            }

            IsInfoExpSys = nav.Uri.Contains("InformationFromExportingSystem");

            if (!IsInfoExpSys)
            {   
                activeNode = AppState.ActiveDatasheet.DatasheetXDoc.DocumentElement.SelectSingleNode(NodeName);
                itemName = $"Datasheet {AppState.ActiveDatasheet.Name}";
                sectionName = $"Section: {Utils.SplitCamelCase(AppState.ActiveSectionName)}"; 
            }
            else
            {
                activeNode = AppState.Organization.InfoExSysXDoc.DocumentElement.SelectSingleNode(NodeName);
                itemName = $"Info From Exp System for {AppState.Organization.Name}";
                sectionName = "Information from Exporting System";
            }


            entity = AppState.SchemaElements.Where(s => s.NodeName == activeNode.Name).FirstOrDefault();

            CurrentEditContext = new EditContext(activeNode);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.StackTrace);
        }
    }

    async Task SaveAsync()
    {
        AppDataService dMgr = new(api);

        if (!IsInfoExpSys)
        {
            AppState.ActiveDatasheet = await dMgr.UpdateDatasheetAsync(AppState.ActiveDatasheet);
        }
        else
        {
            AppState.Organization   = await dMgr.UpdateOrganizationAsync(AppState.Organization);
        }

        AppState.StatusBarMessage = "Data saved";
    }

    void GoSectionHome()
    {
        if (!IsInfoExpSys)
        {
            nav.NavigateTo("/Documents/Sections/SectionHome");
        }
        else
        {
            nav.NavigateTo("/Documents/EditDocumentSet/false");
        }
    }
}
