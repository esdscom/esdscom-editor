@page "/Documents/EditDocument/{IsNew:bool}"

@inject NavigationManager nav
@inject HttpClient api
@inject IJSRuntime js

<EditForm Model="datasheet" OnValidSubmit="HandleValidSubmit" role="form">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container-fluid">

        <PageHeader Title="@title" BackToURL="@backtoURL" />

        @*  <div class="form-group">
        <label for="ddLanguage">Language</label>
        <InputSelect id="ddLanguage" class="form-control col-sm-2" @bind-Value="@languageName">
        @foreach (string langName in languageList)
        {
        <option value="@langName">@langName</option>
        }
        </InputSelect>
        </div>*@

        <div class="row">
            <div class="col form-group">
                <label for="isName">Document Name</label>
                <InputText id="isName" class="form-control" @bind-Value="@datasheet.Name" />
            </div>
        </div>

        <div class="row">
            <div class="col-6 form-group">
                <div class="form-group">
                    <label for="ddMaterialType">Material Type</label>
                    <InputSelect class="form-group" id="ddMaterialType" @bind-Value="@materialType" width="100">
                        @foreach (string materialTypeName in materialTypeList)
                        {
                            <option value="@materialTypeName">@materialTypeName</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="col-6">
                <DocStatus Status="@datasheet.Status" OnStatusSelected="StatusSelectionHandler" />
            </div>
        </div>

        <div class="row pb-3">
            <div class="col">
                <span>Region(s) included:</span>
            </div>
        </div>

        <div class="row">
            <div class="col-9">
                <div class="form-group">
                    <ul>
                        @foreach (Region item in allRegions)
                        {
                            if (item.IsSelected)
                            {
                                <li>
                                    <input type="checkbox" id="@item.Suffix" checked @onchange="eventArgs => { CheckboxClicked(item.Suffix, eventArgs.Value); }" />
                                    <label for="@item.Suffix">@item.Name</label>
                                </li>
                            }
                            else
                            {
                                <li>
                                    <input type="checkbox" id="@item.Suffix" @onchange="eventArgs => { CheckboxClicked(item.Suffix, eventArgs.Value); }" />
                                    <label for="@item.Suffix">@item.Name</label>
                                </li>
                            }
                        }
                    </ul>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col">
                <div class="form-group">
                    <label for="comments">Comments:</label>
                    <InputTextArea id="comments" class="form-control" @bind-Value="@datasheet.Comments" rows="3" cols="30" />
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-2">
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
             <div class="col-10">
                <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
            </div>
        </div>

    </div>
</EditForm>

<style>

    ul {
        column-count: 4;
        column-gap: 2rem;
        list-style: none;
    }

</style>

@code
{
    [CascadingParameter] public AppState AppState { get; set; }

    [Parameter] public bool IsNew { get; set; }

    Datasheet datasheet;
    AppDataService dMgr;
    string backtoURL;
    string title;
    string materialType = "Mixture";
    List<Region> allRegions = new();
    List<string> selectedRegions = new();

    List<string> materialTypeList = new()
        {
            "Mixture",
            "Substance"
        };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        allRegions = Utils.GetRegions();

        dMgr = new(api);

        if (IsNew)
        {
            datasheet = new()
                {
                    Id = Guid.NewGuid(),
                    OrganizationId = AppState.User.OrganizationId,
                    UserId = AppState.User.Id,
                    UserName = AppState.User.Name,
                    DatasheetString = Utils.GetDatasheetXml().OuterXml,
                    Status = 1,
                    Regions = new()
                };

            title = "Add a new Datasheet";
            AppState.StatusBarMessage = "adding a new Datasheet";
        }
        else
        {
            datasheet = AppState.ActiveDatasheet;

            foreach (var item in allRegions)
            {
                if (datasheet.RegionsString.Contains(item.Suffix))
                {
                    selectedRegions.Add(item.Suffix);
                    item.IsSelected = true;
                }
            }

            datasheet.DatasheetXDoc = new();
            datasheet.DatasheetXDoc.LoadXml(datasheet.DatasheetString);

            materialType = datasheet.MaterialType;

            title = $"Editing Datasheet {datasheet.Name}";
            AppState.StatusBarMessage = $"editing the Datasheet {datasheet.Name}";
        }

    }


    private async Task HandleValidSubmit()
    {
        datasheet.MaterialType = materialType;
        datasheet.RegionsString = string.Join(",", selectedRegions.ToArray());

        if (IsNew)
        {   
            AppState.ActiveDatasheet = await dMgr.AddDatasheetAsync(datasheet);

            DatasheetFeedItem dsfi = new()
                {
                    DatasheetId = AppState.ActiveDatasheet.Id,
                    DatasheetFeedId = AppState.ActiveDatasheetFeed.Id,
                    UserId = AppState.User.Id
                };
            await dMgr.AddDatasheetFeedItemAsync(dsfi);

            //refresh the collection
            AppState.ActiveDatasheetFeed = await dMgr.GetDatasheetFeedAsync(AppState.ActiveDatasheet.OrganizationId, AppState.ActiveDatasheetFeed.Id);
            AppState.StatusBarMessage = $"added Datasheet and linked it to the active Document set: {AppState.ActiveDatasheetFeed.Name}";
           backtoURL = "/Documents/ListDocumentsInSet";
        }
        else
        {
            AppState.ActiveDatasheet = await dMgr.UpdateDatasheetAsync(datasheet);
            AppState.StatusBarMessage = "updated Datasheet";
            backtoURL = "/Documents/ListDocuments";
        }

        nav.NavigateTo(backtoURL);
    }

    void Cancel()
    {
         nav.NavigateTo(backtoURL);
    }

    void StatusSelectionHandler(int status)
    {
        datasheet.Status = status;
    }

    void CheckboxClicked(string regionSuffix, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!selectedRegions.Contains(regionSuffix))
            {
                selectedRegions.Add(regionSuffix);
            }
        }
        else
        {
            if (selectedRegions.Contains(regionSuffix))
            {
                selectedRegions.Remove(regionSuffix);
            }
        }
    }
}