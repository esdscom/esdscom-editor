@page "/TestPage2"


@inject AppData appData
@inject AppSettings appSettings

@using Syncfusion.Blazor.Popups

<div class="container-fluid">

    <div id="target">
        <SfDialog Target="#target" ShowCloseIcon="true" @bind-Visible="Visibility" IsModal="true" Height="90%" Width="90%">
            <DialogTemplates>
                <Header> <span class="font-weight-bold">@Entity.DisplayName </span></Header>
                <Content>
                    <PhraseComponent Node="@Node" Entity="@Entity" OnPhrasesSaved="PhrasesSavedHandler" OnCancel="CancelHandler"/>
                </Content>
            </DialogTemplates>
        </SfDialog>

        <div class="row">
            <div class="col-2">
                <button type="button" class="btn btn-info" @onclick="DisplayPhraseSelector">Select</button>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <span>Phrase Codes: @strPhraseCodeNode</span>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <span>Text: @strFullTextNode</span>
            </div>
        </div>


        @*    <span>Phrase Id: @strPhraseIdAttr</span>
            <span>Phrase Cat Id: @strPhraseCatalogueIdAttr</span>

            <span>Merge Phrase(s):</span>
            <span>Phrase Id: @strMergePhraseIdAttr</span>
            <span>Delimiter: @strDelimiterNode</span>
            <span>Phrase Cat Id: @strMergePhraseCatalogueIdAttr</span>
            <span>Phrase No: @strMergePhraseNoAttr</span>
            <span>List Item No:@strMergeListItemNoAttr</span>*@

    </div>

    <div hidden="@bHideHelp">
        <DataPointCommentsComponent Comments="@comments" Occurs="@occurs" />
    </div>

</div>

<style>
    #target {
        min-height: 800px;
        height: 100%;
        position: relative;
    }
</style>

@code
{

    [CascadingParameter] public AppState AppState { get; set; }

    //parameters when this is real
    public XmlNode Node { get; set; }
    public BaseEntity Entity { get; set; }


    private string comments;
    private string occurs;
    private string displayname;

    private bool bHideHelp = true;
    private bool Visibility = false;

    private XmlNode PhraseCodeNode;
    private XmlNode FullTextNode;
    private XmlNode MergePhraseNode;
    // private XmlNode NewLineNode;
    private XmlAttribute PhraseIdAttr;
    private XmlAttribute PhraseCatalogueIdAttr;

    private XmlNode MergeTextNode;
    private XmlNode DelimiterNode;

    private XmlAttribute MergePhraseIdAttr;
    private XmlAttribute MergePhraseCatalogueIdAttr;
    private XmlAttribute MergePhraseNoAttr;
    private XmlAttribute MergeListItemNoAttr;

    private string strPhraseCodeNode;
    private string strFullTextNode;
    //private string strMergePhraseNode;
    // private string strNewLineNode;
    private string strPhraseIdAttr;
    private string strPhraseCatalogueIdAttr;

    // private string strMergeTextNode;
    private string strDelimiterNode;

    private string strMergePhraseIdAttr;
    private string strMergePhraseCatalogueIdAttr;
    private string strMergePhraseNoAttr;
    private string strMergeListItemNoAttr;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        XmlDocument xDoc = new();
        xDoc.LoadXml(AppState.ActiveDatasheet.DatasheetString);


        XmlNode Node1 = xDoc.DocumentElement.SelectSingleNode("IdentificationSubstPrep");
        XmlNode Node2 = Node1.SelectSingleNode("TradeProductIdentity");
        Node = Node2.SelectSingleNode("ProductDefinition");

        Entity = appData.SchemaElements.Where(s => s.NodeName == Node.Name).FirstOrDefault();

        if (Entity is not null)
        {
            displayname = Entity.DisplayName;
            comments = $"{Entity.Comments} {Entity.TypeComments}";
            occurs = Utils.GetOccursText(Entity.Occurs);
        }
        else
        {
            displayname = "entity Not found!!!";
        }

        //Console.WriteLine(displayname);

        if (Node.HasChildNodes)
        {
            PhraseCodeNode = Node.SelectSingleNode("PhraseCode");
            FullTextNode = Node.SelectSingleNode("FullText");
            PhraseIdAttr = ((XmlElement)Node).GetAttributeNode("PhraseId");
            PhraseCatalogueIdAttr = ((XmlElement)Node).GetAttributeNode("PhraseCatalogueId");
            // NewLineNode = Node.SelectSingleNode("NewLine");

            MergePhraseNode = Node.SelectSingleNode("MergePhrase");
            MergeTextNode = MergePhraseNode.SelectSingleNode("MergeText");
            DelimiterNode = MergePhraseNode.SelectSingleNode("Delimiter");
            MergePhraseIdAttr = ((XmlElement)MergePhraseNode).GetAttributeNode("PhraseId");
            MergePhraseCatalogueIdAttr = ((XmlElement)MergePhraseNode).GetAttributeNode("PhraseCatalogueId");
            MergePhraseNoAttr = ((XmlElement)MergePhraseNode).GetAttributeNode("MergePhraseNo");
            MergeListItemNoAttr = ((XmlElement)MergePhraseNode).GetAttributeNode("ListItemNo");

            strPhraseCodeNode = PhraseCodeNode.InnerText;
            strFullTextNode = FullTextNode.InnerText;
            strPhraseIdAttr = PhraseIdAttr.Value;
            strPhraseCatalogueIdAttr = appSettings.ESDSPhraCVersion;

            strDelimiterNode = DelimiterNode.InnerText;

            strMergePhraseIdAttr = MergePhraseIdAttr.Value is null ? "" : MergePhraseIdAttr.Value;
            strMergePhraseCatalogueIdAttr = appSettings.ESDSPhraCVersion;
            strMergePhraseNoAttr = MergePhraseNoAttr.Value;
            strMergeListItemNoAttr = MergeListItemNoAttr.Value;
        }

    }

    private void DisplayPhraseSelector()
    {
        Visibility = true;
    }

    private void ToggleHelp()
    {
        bHideHelp = !bHideHelp;
    }

    private void PhrasesSavedHandler(List<Phrase> phrases)
    {
        strFullTextNode = string.Empty;

        Node.RemoveAll();


        XmlDocument xDoc = new(); // AppState.ActiveDatasheet.DatasheetDoc.OwnerDocument;

        foreach (Phrase phrase in phrases)
        {
            strPhraseCodeNode += phrase.StrucCode + ", ";
            strFullTextNode += phrase.English + ", ";

            XmlAttribute pidAttr = xDoc.CreateAttribute("PhraseId");
            XmlAttribute pcidAttr = xDoc.CreateAttribute("PhraseCatalogueId");

            Node.Attributes.Append(pidAttr);
            Node.Attributes.Append(pcidAttr);

            XmlElement newPhraseCodeNode = xDoc.CreateElement("PhraseCode");
            newPhraseCodeNode.InnerText = phrase.StrucCode;
            XmlElement newFullTextNode = xDoc.CreateElement("FullText");
            newFullTextNode.InnerText = phrase.English;



        }
        Visibility = false;
        StateHasChanged();
    }

    private void CancelHandler()
    {
        Visibility = false;
        StateHasChanged();
    }
}
